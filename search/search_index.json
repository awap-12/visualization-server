{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Description","text":"<p>The backend server of this project.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#deploy","title":"Deploy","text":""},{"location":"#automate-by-github-action","title":"Automate by GitHub action","text":"<p>The solution in this part we use GitHub OIDC provider and Google Cloud IAM Workload Identity Federation.</p> <p></p>"},{"location":"#procedure","title":"procedure","text":"<ol> <li> <p>Create a service account at IAM Service accounts.</p> </li> <li> <p>Grant roles at IAM, who gives permission for access project      resources (Remember enable APIs when grant roles):</p> <ul> <li>App Engine Admin</li> <li>Cloud Build Editor</li> <li> <p>Cloud Scheduler Admin(Optional)</p> <ul> <li>Service Account User</li> <li>Storage Admin</li> </ul> </li> <li> <p>...(Could just set rule to owner for development)</p> </li> <li>Create a pool at Workload Identity Pools</li> </ul> </li> <li> <p>Create a provider at Workload Identity Pools      add issuer: https://token.actions.githubusercontent.com and binding attribute mapping.      </p> </li> <li> <p>Create GitHub action:</p> </li> </ol> <pre><code>jobs:\ndeploy:\nruns-on: ubuntu-latest\npermissions:\ncontents: 'read'\nid-token: 'write'\nsteps:\n- uses: 'actions/checkout@v3'\n- id: 'auth'\nname: 'Authenticate to Google Cloud'\nuses: 'google-github-actions/auth@v1'\nwith:\nworkload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'\nservice_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'\n- id: 'deploy'\nname: 'Deploy code to App Engine'\nuses: 'google-github-actions/deploy-appengine@v1'\n</code></pre> <ol> <li>Binding auth secrets (data from Setting &amp;      Workload Identity Pools &amp;      Account Detail -&gt; key): <pre><code>  GCP_WORKLOAD_IDENTITY_PROVIDER = `projects/${PROJECT_NUM}/locations/global/workloadIdentityPools/${POOL}/attribute.repository/awap-12/visualization-server`\nGCP_SERVICE_ACCOUNT = `${ACCOUNT}@${PROJECT_ID}.iam.gserviceaccount.com`\nGCP_PROJECT = PROJECT_ID\nGCP_SA_KEY = ACCOUNT_GENERATE_KEY\n</code></pre></li> </ol>"},{"location":"#serving","title":"Serving","text":""},{"location":"#database-configuration-in-google-cloud","title":"Database configuration in Google Cloud","text":"<p>Enable app engine require config file <code>app.yaml</code>.</p> <pre><code>- name: 'Create config file'\nrun: |\ncat &gt;&gt; app.yaml &lt;&lt;EOL\nruntime: nodejs18\ninstance_class: F4\nautomatic_scaling:\nmax_instances: 1\ntarget_cpu_utilization: 0.8\nmin_pending_latency: 900ms\nmax_concurrent_requests: 50\nservice: ${{ matrix.service }}\nentrypoint: ${{ matrix.entrypoint }}\nenv_variables:\nDATABASE_SOCKET_PATH: /cloudsql/${{ secrets.DATABASE_CONNECTION_NAME }}\nDATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}\nSERVER_HOST: 0.0.0.0\nDEBUG: '*,-sequelize:*,-koa:*,-express:*'\nEOL\n</code></pre> <p><code>DATABASE_CONNECTION_NAME</code> could find from <code>SQL</code> </p> <p></p> <p><code>DATABASE_PASSWORD</code> is your Google SQL database password when you create the database.</p>"},{"location":"design/serve/","title":"Analyze requirement","text":"<p>The focus of this module is to serve static files. This means user, page related info should not include here. Here we should save chart's name, description, file's path or table for rendering. </p> <pre><code>erDiagram\n    chart ||--|{ file: file_url\n    chart {\n        string id\n        string name\n        string description\n        int userId\n    }\n    file {\n        string url\n        string name\n        string info\n        text data\n    }</code></pre> <p>But during the further discussion, we notice in v3-v4, v6, 7, 10 contains shared files. Under the suggestions form the supervisor. We enhance old plan by extract file or database storage strategy logic into multi-table and do a many-to-many mapping between chart and file table.</p> <p>Local storage table: should storage binding to local static file(or file storage server) Data storage table: should storage binding to a table.</p> <pre><code>erDiagram\n    chart ||--|{ chart_files: chart_id\n    chart {\n        string id\n        string name\n        string description\n        int userId\n    }\n    file ||--|{ chart_files: file_url\n    file {\n        string url\n        string name\n        enum strategy\n        string info\n        string owner\n    }\n    file ||--o| local: file_id\n    file ||--o| database: file_id </code></pre>"},{"location":"design/serve/#behaviour","title":"Behaviour","text":""},{"location":"design/serve/#storagelocaldatabase-module","title":"Storage(local/database) module","text":"<p>In the storage module, we should handle both local storage and database storage.</p> <ul> <li> <p>Handles:</p> <ul> <li> <p>saveStorage: Save a storage and use models hooks for trigger IO and database handling.     In IO handling, we will move exist file path to correct place(the path generate from chartId).</p> </li> <li> <p>getStorage: Get a storage based on File model. Get both local and database storage.(we     can create/get both local and database here).</p> </li> <li> <p>updateStorage: Update a storage.     In IO handling, replace correct path with new file;     In database handling, calculate difference with different operation (Simple implement: drop     old database and create new database).</p> </li> <li> <p>deleteStorage: Remove a storage based on File model.     Due to one-to-one relationship, this function have to remove this table because of cascade(In     the further study, cascade not able to trigger model hooks. So, Here replace cascade by set     null).</p> </li> </ul> </li> </ul>"},{"location":"design/serve/#file-module","title":"File module","text":"<p>In the file module we should handle file info and both local storage and database storage. It designs like an extender for storage, which has a one-to-one relationship.</p> <ul> <li> <p>Handles:</p> <ul> <li> <p>saveFile: Alias for saveStorage.</p> </li> <li> <p>getFileByUrl: Alias for getStorage.</p> </li> <li> <p>updateFile: In update file handle, we should distinguish different strategy:</p> <ul> <li>update the strategy -&gt; remove old storage, and create new storage</li> <li>same strategy -&gt; use alias for updateStorage.</li> </ul> </li> <li> <p>deleteFile: Alias for deleteStorage.</p> </li> </ul> </li> </ul>"},{"location":"design/serve/#chart-module","title":"Chart module","text":"<p>In the chart module we should handle file and chart tables. However, we have to face a problem that multiple chart use a single file. So a many-to-many relationship should be used.</p> <ul> <li> <p>Handles:</p> <ul> <li> <p>saveChart: We should insert both chart and file data into tables, if file have been created,     we have to check did file exists before insert action;</p> </li> <li> <p>getChartById: Chart should be found in this function with file data, which means we have to     inner join all of ChartFile -&gt; File -&gt; Local/Database -&gt; Database Linked file(optional).</p> </li> <li> <p>updateChart: In this function we can insert, modified and delete chart and handle file by     saveFile, updateFile and deleteFile.</p> </li> <li> <p>deleteChart: Remove chart and try to delete files based on relationship.</p> </li> </ul> </li> </ul>"},{"location":"design/user/","title":"Analyze requirement","text":"<p>Grant type we are going to use:</p> <ol> <li>authorization code grant:</li> </ol> <pre><code>sequenceDiagram\n    autonumber\n    participant member's\n    participant user\n    member's-&gt;&gt;user: request authorization code https://.../oauth/authorize?response_type=code&amp;client_id=''&amp;redirect_uri=''&amp;state=''&amp;scope=''\n    user--&gt;&gt;member's: return a code\n    member's-&gt;&gt;user: request token http://.../oauth/token?client_id=''&amp;client_secret=''&amp;grant_type=authorization_code&amp;code=''&amp;redirect_uri=''\n    user--&gt;&gt;member's: return a token {accessToken,refreshToken}</code></pre> <ol> <li>password grant:</li> </ol> <pre><code>sequenceDiagram\n    autonumber\n    participant member's\n    participant user\n    member's-&gt;&gt;user: request a token https://.../oauth/token?grant_type=password&amp;username=''&amp;password=''&amp;client_id=''\n    user--&gt;&gt;member's: return a token</code></pre> <p>But we could share our data with password grant model</p>"}]}