#!/usr/bin/env node
const debug = require("debug")("server");
const { dialect, pool, ...databaseConfig } = require("server/config/database.js");
const sequelize = require("../handles/model.js");
const mysql = require("mysql2");
const http = require("node:http");

const app = require("../app");

const port = normalizePort(process.env.PORT || "3000");

app.set("port", port);

const server = http.createServer(app);

const connection = mysql.createConnection({ ...databaseConfig, database: "information_schema" });

connection.query(`create schema if not exists ${databaseConfig.database}`, err => {
    if (!!err) process.exit(err.errno);
    sequelize.sync({ force: true }).then(() => {
        const inject = require("server/handles/inject.js");

        inject().then(() => {
            server.listen(port);
            server.on("error", onError);
            server.on("listening", onListening);
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 * @param {string|number} val
 * @return {number}
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    return isNaN(port) ? val : port >= 0 ? port : false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error
 */
function onError(error) {
    if (error.syscall !== "listen") throw error;

    let bind = typeof port == "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            debug("%s requires elevated privileges", bind);
            process.exit(1);
            break;
        case "EADDRINUSE":
            debug("%s is already in use", bind);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address(),
        bind = typeof addr == "string" ? "pipe " + addr : "port " + addr.port;
    debug("listening on %s", bind);
}
